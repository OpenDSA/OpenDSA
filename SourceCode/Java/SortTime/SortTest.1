// Top part of sort timing framework
// This part contains all of the test harness for defining the tests
// to be run.
// To compile, combine this file with the code for the sorts
// (invoked by a controlling function called "sorttime")
// followed by SortTest.2

import java.io.*;
import java.math.*;
import java.util.*;
import java.lang.reflect.*;
import java.lang.Integer;



public class SortTest {
// In the end, everything ends up inside a class named "SortTime"

/** Initialize the random variable */
static Random value = new Random(); // Hold the Random class object

/** Create a random number function from the standard Java Random
    class. Turn it into a uniformly distributed value within the
    range 0 to n-1 by taking the value mod n.
    @param n The upper bound for the range.
    @return A value in the range 0 to n-1.
*/
static int random(int n) {
  return Math.abs(value.nextInt()) % n;
}


// The timer variables
static long time1, time2;
static long totaltime;


// The full size of the various lists.
// The idea is to set up some number of test runs in this space.
// For full timing tests, this should be 1,000,000.
// But for debugging purposes, might want to make it shorter to speed
// things up.
static int TESTSIZE = 100000;


// ====================================================================
// The various arrays and lists used by the sorting process
static Integer[] size10 = new Integer[TESTSIZE];
static Integer[] size100 = new Integer[TESTSIZE];
static Integer[] size1000 = new Integer[TESTSIZE];
static Integer[] size10000 = new Integer[TESTSIZE];
static Integer[] size100000 = new Integer[TESTSIZE];
static Integer[] size1000000 = new Integer[TESTSIZE];

static Integer[] size10Asc;
static Integer[] size100Asc;
static Integer[] size1000Asc;
static Integer[] size10000Asc;
static Integer[] size100000Asc = new Integer[TESTSIZE];
static Integer[] size1000000Asc = new Integer[TESTSIZE];

static Integer[] size10Des;
static Integer[] size100Des;
static Integer[] size1000Des;
static Integer[] size10000Des;
static Integer[] size100000Des = new Integer[TESTSIZE];
static Integer[] size1000000Des = new Integer[TESTSIZE];

static Integer[] size10Ide;
static Integer[] size100Ide;
static Integer[] size1000Ide;
static Integer[] size10000Ide;
static Integer[] size100000Ide = new Integer[TESTSIZE];
static Integer[] size1000000Ide = new Integer[TESTSIZE];

static Integer[] size10FewDup;
static Integer[] size100FewDup;
static Integer[] size1000FewDup;
static Integer[] size10000FewDup;
static Integer[] size100000FewDup = new Integer[TESTSIZE];
static Integer[] size1000000FewDup = new Integer[TESTSIZE];

static Integer[] size10SomeDup;
static Integer[] size100SomeDup;
static Integer[] size1000SomeDup;
static Integer[] size10000SomeDup;
static Integer[] size100000SomeDup = new Integer[TESTSIZE];
static Integer[] size1000000SomeDup = new Integer[TESTSIZE];

static Integer[] size10ManyDup;
static Integer[] size100ManyDup;
static Integer[] size1000ManyDup;
static Integer[] size10000ManyDup;
static Integer[] size100000ManyDup = new Integer[TESTSIZE];
static Integer[] size1000000ManyDup = new Integer[TESTSIZE];

static Integer[] size10SlightlyDis;
static Integer[] size100SlightlyDis;
static Integer[] size1000SlightlyDis;
static Integer[] size10000SlightlyDis;
static Integer[] size100000SlightlyDis = new Integer[TESTSIZE];
static Integer[] size1000000SlightlyDis = new Integer[TESTSIZE];



static LinkedList<Integer> arrayList = new LinkedList<Integer>();
static LinkedList<Double> arrayListD = new LinkedList<Double>();
static LinkedList<LinkedList<Integer>> bucket = new LinkedList<LinkedList<Integer>>();


//double array
static double[] dsize10 = new double[TESTSIZE];
static double[] dsize100 = new double[TESTSIZE];
static double[] dsize1000 = new double[TESTSIZE];
static double[] dsize10000 = new double[TESTSIZE];
static double[] dsize100000 = new double[TESTSIZE];
static double[] dsize1000000 = new double[TESTSIZE];

static double[] dsize10Asc = new double[TESTSIZE];
static double[] dsize100Asc = new double[TESTSIZE];
static double[] dsize1000Asc = new double[TESTSIZE];
static double[] dsize10000Asc = new double[TESTSIZE];
static double[] dsize100000Asc = new double[TESTSIZE];
static double[] dsize1000000Asc = new double[TESTSIZE];

static double[] dsize10Des = new double[TESTSIZE];
static double[] dsize100Des = new double[TESTSIZE];
static double[] dsize1000Des = new double[TESTSIZE];
static double[] dsize10000Des = new double[TESTSIZE];
static double[] dsize100000Des = new double[TESTSIZE];
static double[] dsize1000000Des = new double[TESTSIZE];

static double[] dsize10Ide = new double[TESTSIZE];
static double[] dsize100Ide = new double[TESTSIZE];
static double[] dsize1000Ide = new double[TESTSIZE];
static double[] dsize10000Ide = new double[TESTSIZE];
static double[] dsize100000Ide = new double[TESTSIZE];
static double[] dsize1000000Ide = new double[TESTSIZE];

static double[] dsize10FewDup = new double[TESTSIZE];
static double[] dsize100FewDup = new double[TESTSIZE];
static double[] dsize1000FewDup = new double[TESTSIZE];
static double[] dsize10000FewDup = new double[TESTSIZE];
static double[] dsize100000FewDup = new double[TESTSIZE];
static double[] dsize1000000FewDup = new double[TESTSIZE];

static double[] dsize10SomeDup = new double[TESTSIZE];
static double[] dsize100SomeDup = new double[TESTSIZE];
static double[] dsize1000SomeDup = new double[TESTSIZE];
static double[] dsize10000SomeDup = new double[TESTSIZE];
static double[] dsize100000SomeDup = new double[TESTSIZE];
static double[] dsize1000000SomeDup = new double[TESTSIZE];

static double[] dsize10ManyDup = new double[TESTSIZE];
static double[] dsize100ManyDup = new double[TESTSIZE];
static double[] dsize1000ManyDup = new double[TESTSIZE];
static double[] dsize10000ManyDup = new double[TESTSIZE];
static double[] dsize100000ManyDup = new double[TESTSIZE];
static double[] dsize1000000ManyDup = new double[TESTSIZE];

static double[] dsize10SlightlyDis = new double[TESTSIZE];
static double[] dsize100SlightlyDis = new double[TESTSIZE];
static double[] dsize1000SlightlyDis = new double[TESTSIZE];
static double[] dsize10000SlightlyDis = new double[TESTSIZE];
static double[] dsize100000SlightlyDis = new double[TESTSIZE];
static double[] dsize1000000SlightlyDis = new double[TESTSIZE];

static int[] int10 = new int[TESTSIZE];      // For lists of size 10
static int[] int10Asc = new int[TESTSIZE];
static int[] int10Des = new int[TESTSIZE];
static int[] int10Ide = new int[TESTSIZE];
static int[] int10FewDup = new int[TESTSIZE];
static int[] int10SomeDup = new int[TESTSIZE];
static int[] int10ManyDup = new int[TESTSIZE];
static int[] int10SlightlyDis = new int[TESTSIZE];
static int[] int100 = new int[TESTSIZE];     // For lists of size 100
static int[] int100Asc = new int[TESTSIZE];
static int[] int100Des = new int[TESTSIZE];
static int[] int100Ide = new int[TESTSIZE];
static int[] int100FewDup = new int[TESTSIZE];
static int[] int100SomeDup = new int[TESTSIZE];
static int[] int100ManyDup = new int[TESTSIZE];
static int[] int100SlightlyDis = new int[TESTSIZE];
static int[] int1000 = new int[TESTSIZE];     // For lists of size 1000
static int[] int1000Asc = new int[TESTSIZE];
static int[] int1000Des = new int[TESTSIZE];
static int[] int1000Ide = new int[TESTSIZE];
static int[] int1000FewDup = new int[TESTSIZE];
static int[] int1000SomeDup = new int[TESTSIZE];
static int[] int1000ManyDup = new int[TESTSIZE];
static int[] int1000SlightlyDis = new int[TESTSIZE];
static int[] int10000 = new int[TESTSIZE];     // For lists of size 10000
static int[] int10000Asc = new int[TESTSIZE];
static int[] int10000Des = new int[TESTSIZE];
static int[] int10000Ide = new int[TESTSIZE];
static int[] int10000FewDup = new int[TESTSIZE];
static int[] int10000SomeDup = new int[TESTSIZE];
static int[] int10000ManyDup = new int[TESTSIZE];
static int[] int10000SlightlyDis = new int[TESTSIZE];
static int[] int100000 = new int[TESTSIZE];     // For lists of size 100000
static int[] int100000Asc = new int[TESTSIZE];
static int[] int100000Des = new int[TESTSIZE];
static int[] int100000Ide = new int[TESTSIZE];
static int[] int100000FewDup = new int[TESTSIZE];
static int[] int100000SomeDup = new int[TESTSIZE];
static int[] int100000ManyDup = new int[TESTSIZE];
static int[] int100000SlightlyDis = new int[TESTSIZE];
static int[] int1000000 = new int[TESTSIZE];     // For lists of size 1000000
static int[] int1000000Asc = new int[TESTSIZE];
static int[] int1000000Des = new int[TESTSIZE];
static int[] int1000000Ide = new int[TESTSIZE];
static int[] int1000000FewDup = new int[TESTSIZE];
static int[] int1000000SomeDup = new int[TESTSIZE];
static int[] int1000000ManyDup = new int[TESTSIZE];
static int[] int1000000SlightlyDis = new int[TESTSIZE];



public static void main(String[]args) {

	sorttime(args[0],args[1]); // This function is defined inside the specific
                    // sorting code
}


// ====================================================================
// Swap section: Swap the values in a list
// Add more versions of swap as needed for different data types

// Swap for string arrays
static void swapString(String[] A, int i, int j) {

 	A[i] = A[i] + A[j];
        A[j] = A[i].substring(0, A[i].length()  - A[j].length());
        A[i] = A[i].substring(A[j].length(), A[i].length());

}

// Swap for double arrays
static void swapDouble(double[] A, int i, int j) {
  double temp = A[i];
  A[i] = A[j];
  A[j] = temp;
}

// Swap for Integer arrays
static void swapInteger(Integer[] A, int i, int j) {
  int temp = A[i];
  A[i] = A[j];
  A[j] = temp;
}

// ====================================================================
// Permute section: Randomly permute the values in a list
// Add more versions of permute as needed for different data types

static void permute(int[] A, int startpos, int length) {
  for (int i = startpos + length; i > startpos; i--) // for each i
    swap(A, i-1, startpos + random(length)); // swap A[i-1] with a random
}                                            // position in the range 0 to i-1.


static void permuteInteger(Integer[] A, int startpos, int length) {
  for (int i = startpos + length; i > startpos; i--) // for each i
    swapInteger(A, i-1, startpos + random(length)); // swap A[i-1] with a random
}                                            // position in the range 0 to i-1.



static void permuteDouble(double[] A, int startpos, int length) {
  for (int i = startpos + length; i > startpos; i--) // for each i
    swapDouble(A, i-1, startpos + random(length)); // swap A[i-1] with a random
}                                            // position in the range 0 to i-1.


static void fewDuplicates(int[] A, int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0; i<(length*0.1); i++)
	{
		randomValue = random(length + startpos);
		randomValue2 = random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue)
		{
			randomValue = random(length + startpos);
			randomValue2 = random(length + startpos);
		}
		A[randomValue] = randomValue2;
	}
		
}

static void fewDuplicatesDouble(double[] A, int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0; i<(length*0.1); i++)
	{
		randomValue = random(length + startpos);
		randomValue2 = random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue)
		{
			randomValue = random(length + startpos);
			randomValue2 = random(length + startpos);
		}
		A[randomValue] = randomValue2;
	}
	
	
}

static void fewDuplicatesInteger(Integer[] A, int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0; i<(length*0.1); i++)
	{
		randomValue = random(length + startpos);
		randomValue2 = random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue)
		{
			randomValue = random(length + startpos);
			randomValue2 = random(length + startpos);
		}
		A[randomValue] = randomValue2;
	}
	
	
}

static void someDuplicates(int[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.2); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void someDuplicatesInteger(Integer[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.2); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void someDuplicatesDouble(double[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.2); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void manyDuplicates(int[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.5); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void manyDuplicatesInteger(Integer[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.5); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void manyDuplicatesDouble(double[] A,int startpos, int length) {
	int randomValue, randomValue2;
	for(int i=0;i<(length*0.5); i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}
		A[randomValue]=randomValue2;
	}
}

static void slightlyDisordered(int[] A,int startpos, int length) {
	int temp,randomValue,randomValue2;
	for(int i=0;i<(length*0.1);i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}	
		temp=A[randomValue];
		A[randomValue]=A[randomValue2];
		A[randomValue2]=temp;
	}
}

static void slightlyDisorderedInteger(Integer[] A,int startpos, int length) {
	int temp,randomValue,randomValue2;
	for(int i=0;i<(length*0.1);i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}	
		temp=A[randomValue];
		A[randomValue]=A[randomValue2];
		A[randomValue2]=temp;
	}
}

static void slightlyDisorderedDouble(double[] A,int startpos, int length) {
	int randomValue,randomValue2;
	double temp;
	for(int i=0;i<(length*0.1);i++) {
		randomValue=random(length + startpos);
		randomValue2=random(length + startpos);
		while(randomValue==randomValue2 || A[randomValue]!=randomValue) {
			randomValue=random(length + startpos);
			randomValue2=random(length + startpos);
		}	
		temp=A[randomValue];
		A[randomValue]=A[randomValue2];
		A[randomValue2]=temp;
	}
}



// ====================================================================
// This section is for initializing the various lists for the many
// tests.
// Add a new version of "setup" for each data type.
// Add to each version of "setup" for additional tests.

static void setupDouble() {
  int startpos; // Each tests start position in array
  int numtests; // Number of tests of this size
  int i, j;

  numtests = TESTSIZE/10;
 for (i=0; i<numtests; i++) {
    startpos = 10 * i;
    for (j=0; j<10; j++) {
      dsize10[startpos + j] = startpos + j;
      dsize10Asc[startpos + j] = startpos + j; //ascending order size of 10
      dsize10Des[startpos + j] = startpos + 10-j-1;
      dsize10Ide[startpos + j] = 9;
      dsize10FewDup[startpos + j] = startpos + j;
      dsize10SomeDup[startpos + j] = startpos + j;
      dsize10ManyDup[startpos + j] = startpos + j;
      dsize10SlightlyDis[startpos + j] = startpos + j;

    }
    permuteDouble(dsize10, startpos, 10);
    fewDuplicatesDouble(dsize10FewDup,startpos,10);
    someDuplicatesDouble(dsize10SomeDup,startpos,10);
    manyDuplicatesDouble(dsize10ManyDup,startpos,10);
    slightlyDisorderedDouble(dsize10SlightlyDis,startpos,10);
  }

  numtests = TESTSIZE/100;
 for (i=0; i<numtests; i++) {
    startpos = 100 * i;
    for (j=0; j<100; j++) {
      dsize100[startpos + j] = startpos + j;
      dsize100Asc[startpos + j] = startpos + j; //ascending order size of 100
      dsize100Des[startpos + j] = startpos + 100-j-1;
      dsize100Ide[startpos + j] = 99;
      dsize100FewDup[startpos + j] = startpos + j;
      dsize100SomeDup[startpos + j] = startpos + j;
      dsize100ManyDup[startpos + j] = startpos + j;
      dsize100SlightlyDis[startpos + j] = startpos + j;

    }
    permuteDouble(dsize100, startpos, 100);
    fewDuplicatesDouble(dsize100FewDup,startpos,100);
    someDuplicatesDouble(dsize100SomeDup,startpos,100);
    manyDuplicatesDouble(dsize100ManyDup,startpos,100);
    slightlyDisorderedDouble(dsize100SlightlyDis,startpos,100);
  }

  numtests = TESTSIZE/1000;
 for (i=0; i<numtests; i++) {
    startpos = 1000 * i;
    for (j=0; j<1000; j++) {
      dsize1000[startpos + j] = startpos + j;
      dsize1000Asc[startpos + j] = startpos + j; //ascending order size of 1000
      dsize1000Des[startpos + j] = startpos + 1000-j-1;
      dsize1000Ide[startpos + j] = 999;
      dsize1000FewDup[startpos + j] = startpos + j;
      dsize1000SomeDup[startpos + j] = startpos + j;
      dsize1000ManyDup[startpos + j] = startpos + j;
      dsize1000SlightlyDis[startpos + j] = startpos + j;

    }
    permuteDouble(dsize1000, startpos, 1000);
    fewDuplicatesDouble(dsize1000FewDup,startpos,1000);
    someDuplicatesDouble(dsize1000SomeDup,startpos,1000);
    manyDuplicatesDouble(dsize1000ManyDup,startpos,1000);
    slightlyDisorderedDouble(dsize1000SlightlyDis,startpos,1000);
  }

  numtests = TESTSIZE/10000;
 for (i=0; i<numtests; i++) {
    startpos = 10000 * i;
    for (j=0; j<10000; j++) {
      dsize10000[startpos + j] = startpos + j;
      dsize10000Asc[startpos + j] = startpos + j; //ascending order size of 10000
      dsize10000Des[startpos + j] = startpos + 10000-j-1;
      dsize10000Ide[startpos + j] = 9999;
      dsize10000FewDup[startpos + j] = startpos + j;
      dsize10000SomeDup[startpos + j] = startpos + j;
      dsize10000ManyDup[startpos + j] = startpos + j;
      dsize10000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteDouble(dsize10000, startpos, 10000);
    fewDuplicatesDouble(dsize10000FewDup,startpos,10000);
    someDuplicatesDouble(dsize10000SomeDup,startpos,10000);
    manyDuplicatesDouble(dsize10000ManyDup,startpos,10000);
    slightlyDisorderedDouble(dsize10000SlightlyDis,startpos,10000);
  }

numtests = TESTSIZE/100000;
 for (i=0; i<numtests; i++) {
    startpos = 100000 * i;
    for (j=0; j<100000; j++) {
      dsize100000[startpos + j] = startpos + j;
      dsize100000Asc[startpos + j] = startpos + j; //ascending order size of 100000
      dsize100000Des[startpos + j] = startpos + 100000-j-1;
      dsize100000Ide[startpos + j] = 99999;
      dsize100000FewDup[startpos + j] = startpos + j;
      dsize100000SomeDup[startpos + j] = startpos + j;
      dsize100000ManyDup[startpos + j] = startpos + j;
      dsize100000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteDouble(dsize100000, startpos, 100000);
    fewDuplicatesDouble(dsize100000FewDup,startpos,100000);
    someDuplicatesDouble(dsize100000SomeDup,startpos,100000);
    manyDuplicatesDouble(dsize100000ManyDup,startpos,100000);
    slightlyDisorderedDouble(dsize100000SlightlyDis,startpos,100000);
  }

numtests = TESTSIZE/1000000;
 for (i=0; i<numtests; i++) {
    startpos = 1000000 * i;
    for (j=0; j<1000000; j++) {
      dsize1000000[startpos + j] = startpos + j;
      dsize1000000Asc[startpos + j] = startpos + j; //ascending order size of 1000000
      dsize1000000Des[startpos + j] = startpos + 1000000-j-1;
      dsize1000000Ide[startpos + j] = 999999;
      dsize1000000FewDup[startpos + j] = startpos + j;
      dsize1000000SomeDup[startpos + j] = startpos + j;
      dsize1000000ManyDup[startpos + j] = startpos + j;
      dsize1000000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteDouble(dsize1000000, startpos, 1000000);
    fewDuplicatesDouble(dsize1000000FewDup,startpos,1000000);
    someDuplicatesDouble(dsize1000000SomeDup,startpos,1000000);
    manyDuplicatesDouble(dsize1000000ManyDup,startpos,1000000);
    slightlyDisorderedDouble(dsize1000000SlightlyDis,startpos,1000000);
  }

}
static void setupInteger() {

  int startpos; // Each tests start position in array
  int numtests; // Number of tests of this size
  int i, j;
  size10Asc = new Integer[TESTSIZE];
  size10Des = new Integer[TESTSIZE];
  size10Ide = new Integer[TESTSIZE];
  size10FewDup = new Integer[TESTSIZE];
  size10SomeDup = new Integer[TESTSIZE];
  size10ManyDup = new Integer[TESTSIZE];
  size10SlightlyDis = new Integer[TESTSIZE];

  numtests = TESTSIZE/10;
 for (i=0; i<numtests; i++) {
    startpos = 10 * i;
    for (j=0; j<10; j++) {
      size10[startpos + j] = startpos + j;
      size10Asc[startpos + j] = startpos + j; //ascending order size of 10
      size10Des[startpos + j] = startpos + 10-j-1;
      size10Ide[startpos + j] = 9;
      size10FewDup[startpos + j] = startpos + j;
      size10SomeDup[startpos + j] = startpos + j;
      size10ManyDup[startpos + j] = startpos + j;
      size10SlightlyDis[startpos + j] = startpos + j;

    }
    permuteInteger(size10, startpos, 10);
    fewDuplicatesInteger(size10FewDup,startpos,10);
    someDuplicatesInteger(size10SomeDup,startpos,10);
    manyDuplicatesInteger(size10ManyDup,startpos,10);
    slightlyDisorderedInteger(size10SlightlyDis,startpos,10);
  }


  size100Asc = new Integer[TESTSIZE];
  size100Des = new Integer[TESTSIZE];
  size100Ide = new Integer[TESTSIZE];
  size100FewDup = new Integer[TESTSIZE];
  size100SomeDup = new Integer[TESTSIZE];
  size100ManyDup = new Integer[TESTSIZE];
  size100SlightlyDis = new Integer[TESTSIZE];

  numtests = TESTSIZE/100;
 for (i=0; i<numtests; i++) {
    startpos = 100 * i;
    for (j=0; j<100; j++) {
      size100[startpos + j] = startpos + j;
      size100Asc[startpos + j] = startpos + j; //ascending order size of 100
      size100Des[startpos + j] = startpos + 100-j-1;
      size100Ide[startpos + j] = 99;
      size100FewDup[startpos + j] = startpos + j;
      size100SomeDup[startpos + j] = startpos + j;
      size100ManyDup[startpos + j] = startpos + j;
      size100SlightlyDis[startpos + j] = startpos + j;

    }
    permuteInteger(size100, startpos, 100);
    fewDuplicatesInteger(size100FewDup,startpos,100);
    someDuplicatesInteger(size100SomeDup,startpos,100);
    manyDuplicatesInteger(size100ManyDup,startpos,100);
    slightlyDisorderedInteger(size100SlightlyDis,startpos,100);

  }

  size1000Asc = new Integer[TESTSIZE];
  size1000Des = new Integer[TESTSIZE];
  size1000Ide = new Integer[TESTSIZE];
  size1000FewDup = new Integer[TESTSIZE];
  size1000SomeDup = new Integer[TESTSIZE];
  size1000ManyDup = new Integer[TESTSIZE];
  size1000SlightlyDis = new Integer[TESTSIZE];

  numtests = TESTSIZE/1000;
 for (i=0; i<numtests; i++) {
    startpos = 1000 * i;
    for (j=0; j<1000; j++) {
      size1000[startpos + j] = startpos + j;
      size1000Asc[startpos + j] = startpos + j; //ascending order size of 1000
      size1000Des[startpos + j] = startpos + 1000-j-1;
      size1000Ide[startpos + j] = 999;
      size1000FewDup[startpos + j] = startpos + j;
      size1000SomeDup[startpos + j] = startpos + j;
      size1000ManyDup[startpos + j] = startpos + j;
      size1000SlightlyDis[startpos + j] = startpos + j;

    }
    permuteInteger(size1000, startpos, 1000);
    fewDuplicatesInteger(size1000FewDup,startpos, 1000);
    someDuplicatesInteger(size1000SomeDup,startpos,1000);
    manyDuplicatesInteger(size1000ManyDup,startpos,1000);
    slightlyDisorderedInteger(size1000SlightlyDis,startpos,1000);

  }

  size10000Asc = new Integer[TESTSIZE];
  size10000Des = new Integer[TESTSIZE];
  size10000Ide = new Integer[TESTSIZE];
  size10000FewDup = new Integer[TESTSIZE];
  size10000SomeDup = new Integer[TESTSIZE];
  size10000ManyDup = new Integer[TESTSIZE];
  size10000SlightlyDis = new Integer[TESTSIZE];

  numtests = TESTSIZE/10000;
 for (i=0; i<numtests; i++) {
    startpos = 10000 * i;
    for (j=0; j<10000; j++) {
      size10000[startpos + j] = startpos + j;
      size10000Asc[startpos + j] = startpos + j; //ascending order size of 10000
      size10000Des[startpos + j] = startpos + 10000-j-1;
      size10000Ide[startpos + j] = 9999;
      size10000FewDup[startpos + j] = startpos + j;
      size10000SomeDup[startpos + j] = startpos + j;
      size10000ManyDup[startpos + j] = startpos + j;
      size10000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteInteger(size10000, startpos, 10000);
    fewDuplicatesInteger(size10000FewDup,startpos,10000);
    someDuplicatesInteger(size10000SomeDup,startpos,10000);
    manyDuplicatesInteger(size10000ManyDup,startpos,10000);
    slightlyDisorderedInteger(size10000SlightlyDis,startpos,10000);

  }


  numtests = TESTSIZE/100000;
 for (i=0; i<numtests; i++) {
    startpos = 100000 * i;
    for (j=0; j<100000; j++) {
      size100000[startpos + j] = startpos + j;
      size100000Asc[startpos + j] = startpos + j; //ascending order size of 100000
      size100000Des[startpos + j] = startpos + 100000-j-1;
      size100000Ide[startpos + j] = 99999;
      size100000FewDup[startpos + j] = startpos + j;
      size100000SomeDup[startpos + j] = startpos + j;
      size100000ManyDup[startpos + j] = startpos + j;
      size100000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteInteger(size100000, startpos, 100000);
    fewDuplicatesInteger(size100000FewDup,startpos,100000);
    someDuplicatesInteger(size100000SomeDup,startpos,100000);
    manyDuplicatesInteger(size100000ManyDup,startpos,100000);
    slightlyDisorderedInteger(size100000SlightlyDis,startpos,100000);

  }

  numtests = TESTSIZE/1000000;
 for (i=0; i<numtests; i++) {
    startpos = 1000000 * i;
    for (j=0; j<1000000; j++) {
      size1000000[startpos + j] = startpos + j;
      size1000000Asc[startpos + j] = startpos + j; //ascending order size of 1000000
      size1000000Des[startpos + j] = startpos + 1000000-j-1;
      size1000000Ide[startpos + j] = 999999;
      size1000000FewDup[startpos + j] = startpos + j;
      size1000000SomeDup[startpos + j] = startpos + j;
      size1000000ManyDup[startpos + j] = startpos + j;
      size1000000SlightlyDis[startpos + j] = startpos + j;
    }
    permuteInteger(size1000000, startpos, 1000000);
    fewDuplicatesInteger(size1000000FewDup,startpos,1000000);
    someDuplicatesInteger(size1000000SomeDup,startpos,1000000);
    manyDuplicatesInteger(size1000000ManyDup,startpos,1000000);
    slightlyDisorderedInteger(size1000000SlightlyDis,startpos,1000000);

  }

}
static void setupint() {
  int startpos; // Each tests start position in array
  int numtests; // Number of tests of this size
  int i, j;

  // int array of size 10: Uniform random distribution
  numtests = TESTSIZE/10;
  for (i=0; i<numtests; i++) {
    startpos = 10 * i;
    for (j=0; j<10; j++) {
      int10[startpos + j] = startpos + j;
      int10Asc[startpos+j] = startpos + j;
      int10Des[startpos+j] = startpos + 10-j-1;
      int10Ide[startpos+j] = 9;
      int10FewDup[startpos+j] = startpos + j;
      int10SomeDup[startpos+j] = startpos + j;
      int10SlightlyDis[startpos+j] = startpos + j;
      int10ManyDup[startpos+j] = startpos + j;
    }
    permute(int10, startpos, 10);
    fewDuplicates(int10FewDup,startpos,10);
    someDuplicates(int10SomeDup,startpos,10);
    manyDuplicates(int10ManyDup,startpos,10);
    slightlyDisordered(int10SlightlyDis,startpos,10);
  }



  // int array of size 100: Uniform random distribution
  numtests = TESTSIZE/100;
  for (i=0; i<numtests; i++) {
    startpos = 100 * i;
    for (j=0; j<100; j++) {
      int100[startpos + j] = startpos + j;
      int100Asc[startpos+j] = startpos + j;
      int100Des[startpos+j] = startpos + 100-j-1;
      int100Ide[startpos+j] = 99;
      int100FewDup[startpos+j] = startpos + j;
      int100SomeDup[startpos+j] = startpos + j;
      int100ManyDup[startpos+j] = startpos + j;
      int100SlightlyDis[startpos+j] = startpos + j;

    }
    permute(int100, startpos, 100);
    fewDuplicates(int100FewDup,startpos,100);
    someDuplicates(int100SomeDup,startpos,100);
    manyDuplicates(int100ManyDup,startpos,100);
    slightlyDisordered(int100SlightlyDis,startpos,100);

  }


 // int array of size 1000: Uniform random distribution
  numtests = TESTSIZE/1000;
  for (i=0; i<numtests; i++) {
    startpos = 1000 * i;
    for (j=0; j<1000; j++) {
      int1000[startpos + j] = startpos + j;
      int1000Asc[startpos+j] = startpos + j;
      int1000Des[startpos+j] = startpos + 1000-j-1;
      int1000Ide[startpos+j] = 999;
      int1000FewDup[startpos+j] = startpos + j;
      int1000SomeDup[startpos+j] = startpos + j;
      int1000ManyDup[startpos+j] = startpos + j;
      int1000SlightlyDis[startpos+j] = startpos + j;

    }
    permute(int1000, startpos, 1000);
    fewDuplicates(int1000FewDup,startpos,1000);
    someDuplicates(int1000SomeDup,startpos,1000);
    manyDuplicates(int1000ManyDup,startpos,1000);
    slightlyDisordered(int1000SlightlyDis,startpos,1000);

  }

 // int array of size 10000: Uniform random distribution
  numtests = TESTSIZE/10000;
  for (i=0; i<numtests; i++) {
    startpos = 10000 * i;
    for (j=0; j<10000; j++) {
      int10000[startpos + j] = startpos + j;
      int10000Asc[startpos+j] = startpos + j;
      int10000Des[startpos+j] = startpos + 10000-j-1;
      int10000Ide[startpos+j] = 9999;
      int10000FewDup[startpos+j] = startpos + j;
      int10000SomeDup[startpos+j] = startpos + j;
      int10000ManyDup[startpos+j] = startpos + j;
      int10000SlightlyDis[startpos+j] = startpos + j;

    }
    permute(int10000, startpos, 10000);
    fewDuplicates(int10000FewDup,startpos,10000);
    someDuplicates(int10000SomeDup,startpos,10000);
    manyDuplicates(int10000ManyDup,startpos,10000);
    slightlyDisordered(int10000SlightlyDis,startpos,10000);

  }

 // int array of size 100000: Uniform random distribution
  numtests = TESTSIZE/100000;
  for (i=0; i<numtests; i++) {
    startpos = 100000 * i;
    for (j=0; j<100000; j++) {
      int100000[startpos + j] = startpos + j;
      int100000Asc[startpos+j] = startpos + j;
      int100000Des[startpos+j] = startpos + 100000-j-1;
      int100000Ide[startpos+j] = 99999;
      int100000FewDup[startpos+j] = startpos + j;
      int100000SomeDup[startpos+j] = startpos + j;
      int100000ManyDup[startpos+j] = startpos + j;
      int100000SlightlyDis[startpos+j] = startpos + j;

    }
    permute(int100000, startpos, 100000);
    fewDuplicates(int100000FewDup,startpos,100000);
    someDuplicates(int100000SomeDup,startpos,100000);
    manyDuplicates(int100000ManyDup,startpos,100000);
    slightlyDisordered(int100000SlightlyDis,startpos,100000);

  }

 // int array of size 1000000: Uniform random distribution
  numtests = TESTSIZE/1000000;
  for (i=0; i<numtests; i++) {
    startpos = 1000000 * i;
    for (j=0; j<1000000; j++) {
      int1000000[startpos + j] = startpos + j;
      int1000000Asc[startpos+j] = startpos + j;
      int1000000Des[startpos+j] = startpos + 1000000-j-1;
      int1000000Ide[startpos+j] = 999999;
      int1000000FewDup[startpos+j] = startpos + j;
      int1000000SomeDup[startpos+j] = startpos + j;
      int1000000ManyDup[startpos+j] = startpos + j;
      int1000000SlightlyDis[startpos+j] = startpos + j;

    }
    permute(int1000000, startpos, 1000000);
    fewDuplicates(int1000000FewDup,startpos,1000000);
    someDuplicates(int1000000SomeDup,startpos,1000000);
    manyDuplicates(int1000000ManyDup,startpos,1000000);
    slightlyDisordered(int1000000SlightlyDis,startpos,1000000);
  }
}

static void testsortallDouble(String name, int testsize) {
  int length;
  if (testsize == 10) {
    length = 10;
    testsortDouble(name, testsize, dsize10, length,"Random Distribution");
    testsortDouble(name, testsize, dsize10Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize10Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize10Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize10FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize10SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize10ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize10SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100) {
    length = 100;
    testsortDouble(name, testsize, dsize100, length,"Random Distribution");
    testsortDouble(name, testsize, dsize100Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize100Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize100Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize100FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize100SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize100ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize100SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000) {
    length = 1000;
    testsortDouble(name, testsize, dsize1000, length,"Random Distribution");
    testsortDouble(name, testsize, dsize1000Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize1000Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize1000Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize1000FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize1000SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize1000ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize1000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 10000) {
    length = 10000;
    testsortDouble(name, testsize, dsize10000, length,"Random Distribution");
    testsortDouble(name, testsize, dsize10000Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize10000Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize10000Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize10000FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize10000SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize10000ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize10000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100000) {
    length = 100000;
    testsortDouble(name, testsize, dsize100000, length,"Random Distribution");
    testsortDouble(name, testsize, dsize100000Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize100000Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize100000Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize100000FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize100000SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize100000ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize100000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000000) {
    length = 1000000;
    testsortDouble(name, testsize, dsize1000000, length,"Random Distribution");
    testsortDouble(name, testsize, dsize1000000Asc, length,"Ascending Order");
    testsortDouble(name, testsize, dsize1000000Des, length,"Decreasing Order");
    testsortDouble(name, testsize, dsize1000000Ide, length,"Identical Keys");
    testsortDouble(name, testsize, dsize1000000FewDup, length,"Few Duplicates");
    testsortDouble(name, testsize, dsize1000000SomeDup, length,"Some Duplicates");
    testsortDouble(name, testsize, dsize1000000ManyDup, length,"Many Duplicates");
    testsortDouble(name, testsize, dsize1000000SlightlyDis, length,"Slightly Distributed");
  }
  System.out.println();
}


static void testsortallInteger(String name, int testsize) {
  int length;
  if (testsize == 10) {
    length = 10;
    testsortInteger(name, testsize, size10, length,"Random Distribution");
    testsortInteger(name, testsize, size10Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size10Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size10Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size10FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size10SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size10ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size10SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100) {
    length = 100;
    testsortInteger(name, testsize, size100, length,"Random Distribution");
    testsortInteger(name, testsize, size100Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size100Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size100Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size100FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size100SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size100ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size100SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000) {
    length = 1000;
    testsortInteger(name, testsize, size1000, length,"Random Distribution");
    testsortInteger(name, testsize, size1000Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size1000Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size1000Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size1000FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size1000SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size1000ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size1000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 10000) {
    length = 10000;
    testsortInteger(name, testsize, size10000, length,"Random Distribution");
    testsortInteger(name, testsize, size10000Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size10000Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size10000Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size10000FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size10000SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size10000ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size10000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100000) {
    length = 100000;
    testsortInteger(name, testsize, size100000, length,"Random Distribution");
    testsortInteger(name, testsize, size100000Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size100000Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size100000Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size100000FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size100000SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size100000ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size100000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000000) {
    length = 1000000;
    testsortInteger(name, testsize, size1000000, length,"Random Distribution");
    testsortInteger(name, testsize, size1000000Asc, length,"Ascending Order");
    testsortInteger(name, testsize, size1000000Des, length,"Decreasing Order");
    testsortInteger(name, testsize, size1000000Ide, length,"Identical Keys");
    testsortInteger(name, testsize, size1000000FewDup, length,"Few Duplicates");
    testsortInteger(name, testsize, size1000000SomeDup, length,"Some Duplicates");
    testsortInteger(name, testsize, size1000000ManyDup, length,"Many Duplicates");
    testsortInteger(name, testsize, size1000000SlightlyDis, length,"Slightly Distributed");
  }
  System.out.println();
}

static void testsortallint(String name, int testsize) {
  int length;
  if (testsize == 10) {
    length = 10;
    testsortint(name, testsize, int10, length,"Random Distribution");
    testsortint(name, testsize, int10Asc, length,"Ascending Order");
    testsortint(name, testsize, int10Des, length,"Decreasing Order");
    testsortint(name, testsize, int10Ide, length,"Identical Keys");
    testsortint(name, testsize, int10FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int10SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int10ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int10SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100) {
    length = 100;
    testsortint(name, testsize, int100, length,"Random Distribution");
    testsortint(name, testsize, int100Asc, length,"Ascending Order");
    testsortint(name, testsize, int100Des, length,"Decreasing Order");
    testsortint(name, testsize, int100Ide, length,"Identical Keys");
    testsortint(name, testsize, int100FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int100SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int100ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int100SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000) {
    length = 1000;
    testsortint(name, testsize, int1000, length,"Random Distribution");
    testsortint(name, testsize, int1000Asc, length,"Ascending Order");
    testsortint(name, testsize, int1000Des, length,"Decreasing Order");
    testsortint(name, testsize, int1000Ide, length,"Identical Keys");
    testsortint(name, testsize, int1000FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int1000SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int1000ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int1000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 10000) {
    length = 10000;
    testsortint(name, testsize, int10000, length,"Random Distribution");
    testsortint(name, testsize, int10000Asc, length,"Ascending Order");
    testsortint(name, testsize, int10000Des, length,"Decreasing Order");
    testsortint(name, testsize, int10000Ide, length,"Identical Keys");
    testsortint(name, testsize, int10000FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int10000SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int10000ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int10000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 100000) {
    length = 100000;
    testsortint(name, testsize, int100000, length,"Random Distribution");
    testsortint(name, testsize, int100000Asc, length,"Ascending Order");
    testsortint(name, testsize, int100000Des, length,"Decreasing Order");
    testsortint(name, testsize, int100000Ide, length,"Identical Keys");
    testsortint(name, testsize, int100000FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int100000SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int100000ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int100000SlightlyDis, length,"Slightly Distributed");
  }
  if (testsize == 1000000) {
    length = 1000000;
    testsortint(name, testsize, int1000000, length,"Random Distribution");
    testsortint(name, testsize, int1000000Asc, length,"Ascending Order");
    testsortint(name, testsize, int1000000Des, length,"Decreasing Order");
    testsortint(name, testsize, int1000000Ide, length,"Identical Keys");
    testsortint(name, testsize, int1000000FewDup, length,"Few Duplicates");
    testsortint(name, testsize, int1000000SomeDup, length,"Some Duplicates");
    testsortint(name, testsize, int1000000ManyDup, length,"Many Duplicates");
    testsortint(name, testsize, int1000000SlightlyDis, length,"Slightly Distributed");
  }
  System.out.println();
}

@SuppressWarnings("unchecked")
static void testsortDouble(String methodName, int testsize, double[] A, int length, String dataDist) {
  System.out.print(methodName + ",double, " + length + "," + dataDist + "," );

  try {
    int numruns;
    for(numruns = 0; numruns < 9; numruns++) {
      setupDouble();
      double [] array = new double[TESTSIZE];
      SortTest s = new SortTest();
      Class cls = s.getClass();
      Class[] c = new Class[3];
      c[0] = array.getClass();
      c[1] = int.class;
      c[2] = int.class;
      Method method = cls.getDeclaredMethod(methodName, c);
      method.setAccessible(true);

      int i;
      totaltime = 0;
      time1 = millis();
      for (i = 0; i < testsize; i += length) {
        Object[] arguments = { A, i, length };
        method.invoke(s, arguments);
      }
      time2 = millis();
      if(numruns == 4) {
     	 totaltime = time2 - time1;
    	 System.out.println(totaltime);
      }
    }

  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}


@SuppressWarnings("unchecked")
static void testsortInteger(String methodName, int testsize, Integer[] A, int length, String dataDist) {
  System.out.print(methodName + ",Integer, " + length + "," + dataDist + ","  );

  try {
    int numruns;
    for(numruns = 0; numruns < 9; numruns++) {
      setupInteger();
      Integer [] array = new Integer[TESTSIZE];
      SortTest s = new SortTest();
      Class cls = s.getClass();
      Class[] c = new Class[3];
      c[0] = array.getClass();
      c[1] = int.class;
      c[2] = int.class;
      Method method = cls.getDeclaredMethod(methodName, c);
      method.setAccessible(true);

      int i;
      totaltime = 0;
      time1 = millis();
      for (i = 0; i < testsize; i += length) {
        Object[] arguments = { A, i, length };
        method.invoke(s, arguments);
      }
      time2 = millis();
      if(numruns == 4) {
     	 totaltime = time2 - time1;
    	 System.out.println(totaltime);
      }
    }
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}

@SuppressWarnings("unchecked")
static void testsortint(String methodName, int testsize, int[] A, int length, String dataDist) {
  System.out.print(methodName + ",int, " + length + "," + dataDist + ","  );
  try {
    int numruns;
    for(numruns = 0; numruns < 9; numruns++) {
      setupint();
      int [] array = new int[TESTSIZE];
      SortTest s = new SortTest();
      Class cls = s.getClass();
      Class[] c = new Class[3];
      c[0] = array.getClass();
      c[1] = int.class;
      c[2] = int.class;
      Method method = cls.getDeclaredMethod(methodName, c);
      method.setAccessible(true);

      int i;
      totaltime = 0;
      time1 = millis();
      for (i = 0; i < testsize; i += length) {
        Object[] arguments = { A, i, length };
        method.invoke(s, arguments);
      }
      time2 = millis();
      if(numruns == 4) {
     	 totaltime = time2 - time1;
    	 System.out.println(totaltime);
      }
    }
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}
